#!/usr/bin/python3
from models.base import Base
import sys
"""
the class Rectangle that inherits from Base
"""


class Rectangle(Base):
    """Rectangle that inherits from Base:"""
    __width -> width
    __height -> height
    __x -> x
    __y -> y

    def __init__(self, width, height, x=0, y=0, id=None):
        """
        args width height x y and id 
        """
        self.width = width
        self.height = height
        self.x = x
        self.y = y
        super().__init__(id)

      @property
    def width(self):
        """gets width"""
        return (self.__width)

    @width.setter
    def width(self, value):
        """sets width
        Args
           value
        """
        if not isinstance(value, int):
            raise TypeError('{} must be an integer'.format('width'))
        if value <= 0:
            raise ValueError('{} must be > 0'.format('width'))
        self.__width = value

    @property
    def height(self):
        """gets height"""
        return (self.__height)

    @height.setter
    def height(self, value):
        """sets height
        Args
           value
        """
        if not isinstance(value, int):
            raise TypeError('{} must be an integer'.format('height'))
        if value <= 0:
            raise ValueError('{} must be > 0'.format('height'))
        self.__height = value

    @property
    def x(self):
        """gets x"""
        return(self.__x)

    @x.setter
    def x(self, value):
        """sets x
        Args
           x
        """
        if not isinstance(value, int):
            raise TypeError('{} must be an integer'.format('x'))
        if value < 0:
            raise ValueError('{} must be >= 0'.format('x'))
        self.__x = value

    @property
    def y(self):
        """gets y"""
        return(self.__y)

    @y.setter
    def y(self, value):
        """sets y
        Args
           y
        """
        if not isinstance(value, int):
            raise TypeError('{} must be an integer'.format('y'))
        if value < 0:
            raise ValueError('{} must be >= 0'.format('y'))
        self.__y = value  
